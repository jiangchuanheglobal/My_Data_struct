/*
 * binary search tree implementation
 *
 */
#include <stdlib.h>
#include "BSTree.h"
static struct TreeNode* minimun(struct TreeNode* x);
static struct TreeNode* successor(struct TreeNode* x);
static void transplant(struct BSTree* tree, struct TreeNode* u, struct TreeNode* v);

struct BSTree* 
create_bstree() {
	struct BSTree* tree = malloc(sizeof(struct BSTree));
	tree->root = NULL;
	return tree;
}

void 
destroy_bstree(struct BSTree* tree) {
	if (tree != NULL) {
		if (tree->root != NULL) {
			// using postorder traversal to delete all nodes
		}
	}
}

void 
insert_tree_node(struct BSTree* tree, struct TreeNode* x) {
	struct TreeNode* node = tree->root;
	struct TreeNode* pi;
 	pi = NULL;
	while (node != NULL) {
		pi = node->pi;
		if (x->key <= node->key) {
			node = node->left;
		}
		else {
			node = node->right;
		}
	}

	if (pi == NULL) {
		// empty tree
		tree->root = x;
		x->pi = NULL;
	}
}

void 
delete_tree_node(struct BSTree* tree, struct TreeNode* x) {
}

struct TreeNode* 
minimun(struct TreeNode* x) {
}
struct TreeNode* 
successor(struct TreeNode* x) {
}

void 
transplant(struct BSTree* tree, struct TreeNode* u, struct TreeNode* v);
